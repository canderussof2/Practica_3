x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
#b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/(sigma**2/(n-1)*sd_x))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]-4)*sd(x)*sqrt(n-1)/sqrt(sigma))
}
hist(b_1, prob=T)
hist(b_0, prob=T)
sigma
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
#b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/(sigma**2/(n-1)*sd_x))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]-4) * sd(x) * sqrt(n-1) / sqrt(sigma))
}
hist(b_0, prob=T)
hist(b_1, prob=T)
summary(modelo_ajustado)$coefficients[2]-4
summary(modelo_ajustado)$coefficients[2]-4) * sd(x)
(summary(modelo_ajustado)$coefficients[2]-4) * sd(x)
(summary(modelo_ajustado)$coefficients[2]-4) * sd(x) * sqrt(n-1)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
for(i in 1:Nrep){
y <- 4-2*x+rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, summary(modelo_ajustado)$coefficients[1])
b_1 <- append(b_1, summary(modelo_ajustado)$coefficients[2])
}
(b_1-4)*sd(x)*sqrt(n-1)/sqrt(1)
x <- runif(60,0,20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
for(i in 1:Nrep){
y <- 4-2*x+rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, summary(modelo_ajustado)$coefficients[1])
b_1 <- append(b_1, summary(modelo_ajustado)$coefficients[2])
}
(b_1-4)*sd(x)*sqrt(n-1)/sqrt(1)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
#b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/(sigma**2/(n-1)*sd_x))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+4) * sd(x) * sqrt(n-1) / sqrt(sigma))
}
hist(b_1, prob=T)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
#b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
#b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/(sigma**2/(n-1)*sd_x))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_1, prob=T)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
#b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/ sqrt(1)*(1/n+mean(x)**2/sd(x)*(n-1)))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_1, prob=T)
hist(b_0, prob=T)
hist(b_1, prob=T)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
#b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/ 1*(1/n+mean(x)**2/sd(x)*(n-1)))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_1, prob=T)
hist(b_0, prob=T)
hist(b_1, prob=T)
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/ 1*(1/n+mean(x)**2/sd(x)**2*(n-1)))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_0, prob=T)
hist(b_1, prob=T)
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/ 1*(1/n+mean(x)**2/(n-1)*sd(x)**2))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_0, prob=T)
hist(b_1, prob=T)
b_0
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/ 1*(1/n+mean(x)**2/(n-1)*sd(x)**2))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_1, prob=T)
hist(b_0, prob=T)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/ 1*(1/n+mean(x)**2/(n-1)*sd(x)**2))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_1, prob=T)
hist(b_0, prob=T)
b_0
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/( 1*(1/n+mean(x)**2/(n-1)*sd(x)**2)))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_0, prob=T)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/( 1*(1/n+mean(x)**2/(n-1)*sd(x)**2)))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_0, prob=T)
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, (summary(modelo_ajustado)$coefficients[1]-4)/( 1*(1/n+mean(x)**2/(n-1)*sd(x)**2)))
b_1 <- append(b_1, (summary(modelo_ajustado)$coefficients[2]+2) * sd(x) * sqrt(n-1) / sqrt(1))
}
hist(b_0, prob=T)
hist(b_1, prob=T)
summary(modelo_ajustado)$coefficients[1]
summary(modelo_ajustado)$sigma
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
b_2 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, summary(modelo_ajustado)$coefficients[1])
b_1 <- append(b_1, summary(modelo_ajustado)$coefficients[2])
b_2 <- append(b_1, summary(modelo_ajustado)$sigma)
}
hist(b_1, prob=T)
hist(b_2, prob=T)
b_2
n <- 10
x <- runif(n, 0, 20)
Nrep <- 1000
b_0 <- c()
b_1 <- c()
b_2 <- c()
sd_x <- sd(x)
sigma <- 1
for(i in 1:Nrep){
y <- 4 - 2*x + rnorm(n)
modelo_ajustado <- lm(y~x)
b_0 <- append(b_0, summary(modelo_ajustado)$coefficients[1])
b_1 <- append(b_1, summary(modelo_ajustado)$coefficients[2])
b_2 <- append(b_1, sd(y))
}
hist(b_2, prob=T)
# ejercicio 2.1
# semilla = 123
semilla = 123
set.seed(semilla)
x1_fijos=round(rnorm(60,10,5),2)
x2_fijos=round(rnorm(60,10,5),2)
interx1x2=round(x1_fijos * x2_fijos,2)
generadora=function(){
y=2 - 3 * x1_fijos + 2 * x2_fijos -10 * interx1x2 + rnorm(60,0,1)
return(y)
}
y=generadora()
# a
ajuste1=lm(formula=y ~ x1_fijos * x2_fijos , x=TRUE  )
resumen1=summary(ajuste1)
resumen1
beta1_est=ajuste1$coefficients[2]
beta1_est
# b
# intervalo de confianza para beta1
confint(ajuste1,parm = "x1_fijos" , level = 0.9)
# c
#El verdadero valor de Beta1 en este caso es -3
# el intervalo de confianza contiene al parametro
confint(ajuste1,parm = "x1_fijos" , level = 0.9)[1]<=-3 && confint(ajuste1,parm = "x1_fijos" , level = 0.9)[2]>=-3
# d
# ejercicio 2.2
# ajusto modelo sin int
ajuste1_sin_int=lm(formula=y ~ x1_fijos + x2_fijos , x=TRUE  )
resumen1_sin_int=summary(ajuste1_sin_int)
resumen1_sin_int
alfa1_est=ajuste1_sin_int$coefficients[2]
alfa1_est
# e
# intervalo de confianza para alfa1
confint(ajuste1_sin_int,parm = "x1_fijos" , level = 0.9)
# f
#El verdadero valor del parametro sigue siendo -3
# el intervalo de confianza no contiene al parametro
confint(ajuste1_sin_int,parm = "x1_fijos" , level = 0.9)[1]<=-3 && confint(ajuste1_sin_int,parm = "x1_fijos" , level = 0.9)[2]>=-3
# ejercicio 2.2
# semilla = 123
semilla = 123
# creo mi funcion que me da el estimador de beta1 y si cubre al parametro real
generador_betas=function(nrep,semilla){
mat_out=matrix(nrow=nrep,ncol=2)
set.seed(semilla)
x1_fijos=round(rnorm(60,10,5),2)
x2_fijos=round(rnorm(60,10,5),2)
interx1x2=round(x1_fijos * x2_fijos,2)
for(i in 1:nrep){
e=rnorm(60,0,1)
y=2 - 3 * x1_fijos + 2 * x2_fijos -10 * interx1x2 + e
modelo=lm(formula=y ~ x1_fijos * x2_fijos , x=TRUE)
mat_out[i,1]=modelo$coefficients[2] # guardo el valor estimado de beta1
ic_1=confint(modelo,'x1_fijos',0.9)
mat_out[i,2]=if(ic_1[1]<=-3 & ic_1[2]>=-3){TRUE}else{FALSE} # guardo si se cubre de verdad el verdadero valor
}
return(mat_out)
}
resultados_betas=generador_betas(1000,semilla)
# a
#boxplot
boxplot(resultados_betas[,1],main="Boxplot de estimadores de Beta1 simulados")
# parece ser insesgado ya que el boxplot esta muy centrado en -3 y
# la dispersion parece simetrica a ambos lados
# calculamos el sesgo:
mean(resultados_betas[,1]) - (-3)
# b
# calculo cubrimiento empirico
mean(resultados_betas[,2])
# cubre con nivel muy cercano al de diseño que es 0.9
# creo mi funcion que me da el estimador de beta1 y si cubre al parametro real
generador_alfas=function(nrep,semilla){
mat_out=matrix(nrow=nrep,ncol=2)
set.seed(semilla)
x1_fijos=round(rnorm(60,10,5),2)
x2_fijos=round(rnorm(60,10,5),2)
interx1x2=round(x1_fijos * x2_fijos,2)
for(i in 1:nrep){
e=rnorm(60,0,1)
y=2 - 3 * x1_fijos + 2 * x2_fijos -10 * interx1x2 + e
modelo=lm(formula=y ~ x1_fijos + x2_fijos , x=TRUE)
mat_out[i,1]=modelo$coefficients[2] # guardo el valor estimado de alfa1
ic_1=confint(modelo,'x1_fijos',0.9)
mat_out[i,2]=if(ic_1[1]<=-3 & ic_1[2]>=-3){TRUE}else{FALSE} # guardo si se cubre de verdad el verdadero valor
}
return(mat_out)
}
resultados_alfas=generador_alfas(1000,semilla)
sd(resultados_alfas[,1])
# c
# boxplot de alfas
boxplot(resultados_alfas[,1],main="Boxplot de estimadores de alfa1 simulados")
# alfa 1 es muy sesgado, subestima al parametro real , parece estar centrado cercano a -100
#calculamos el sesgo
mean(resultados_alfas[,1]) - (-3)
# d
# cubrimiento empirico de la simulacion de alfas al parametro real
mean(resultados_alfas[,2])
# el cubirmiento empirico da 0, por ende los intervalos diseñados no atrapan al verdadero valor del parametro
# nunca en estas 1000 simulaciones con esta semilla. Esto es porque los datos reales
# no responden a este modelo
# desvio estandar beta1 estimadores
sd(resultados_betas[,1])
# desvio estandar alfa1 estimadores
sd(resultados_alfas[,1])
#----------------- Ejercicio 6 -----------------
rm(list=ls())
load("temp_bsas.RData")
load("/home/clinux01/Escritorio/Cande/Practica_3/temp_bsas.RData")
variable
variable
dim(variable)
class(variable)
#Utilizando la funcion apply
prom_mensual<-apply(variable,c(4),mean)
prom_mensual
#Utilizando la funcion apply
prom_mensual<-apply(variable,c(1,2,3),mean)
prom_mensual
#lat y long de cada uno de los 4 niveles
prom_mensual<-apply(prom_mensual,c(3),mean)
#Utilizando la funcion apply
prom_mensual<-apply(variable,c(1,2,3),mean)
prom_mensual #al mostrarlo por pantalla me da los promedios mensuales para cada
#lat y long de cada uno de los 4 niveles
prom_reti<-apply(prom_mensual,c(3),mean)
prom_reti
prom<-apply(variable,c(3),mean)
prom
prom_mensual<-apply(variable,c(4),mean)
prom_mensual #al mostrarlo por pantalla me da los promedios mensuales para cada
#lat y long de cada uno de los 4 niveles
dim(prom_mensual)
prom_mensual<-apply(variable,c(1,2,3),mean)
prom_mensual #al mostrarlo por pantalla me da los promedios mensuales para cada
dim_reticula<-nlat*nlon
#es una array de 4 dimensiones
nlon<-8
nlat<-14
niso<-4
ntiempo<-72
dim_reticula<-nlat*nlon
dim_reticula<-nlat*nlon
for (longitud in prom_mensual){
for(latitud in prom_mensual){
reticula<-prom_mensual[latitud*longitud,]
}
}
reticula<-prom_mensual[latitud*longitud]
rm(list="reticula")
for (longitud in prom_mensual){
for(latitud in prom_mensual){
reticula<-prom_mensual[latitud*longitud]
}
}
reticula
#lat y long de cada uno de los 4 niveles
dim(prom_mensual)
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<-prom_mensual[latitud*longitud,,]
}
}
#----------------- Ejercicio 6 -----------------
rm(list=ls())
load("/home/clinux01/Escritorio/Cande/Practica_3/temp_bsas.RData")
#es una array de 4 dimensiones
nlon<-8
nlat<-14
niso<-4
ntiempo<-72
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<-prom_mensual[latitud*longitud,]
}
}
prom_mensual<-apply(variable,c(1,2,3),mean)
prom_mensual #al mostrarlo por pantalla me da los promedios mensuales para cada
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<-prom_mensual[latitud*longitud,]
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula [longitud, latitud]<- longitud*latitud
}
}
#----------------- Ejercicio 6 -----------------
rm(list=ls())
setwd("/home/clinux01/Escritorio/Cande/Practica_3/")
load("/home/clinux01/Escritorio/Cande/Practica_3/temp_bsas.RData")
dim(variable)
class(variable)
#es una array de 4 dimensiones
nlon<-8
nlat<-14
niso<-4
ntiempo<-72
prom_mensual<-apply(variable,c(1,2,3),mean)
prom_mensual #al mostrarlo por pantalla me da los promedios mensuales para cada
#lat y long de cada uno de los 4 niveles
dim(prom_mensual)
dim_reticula<-nlat*nlon
reticula<-array(data=NA,dim=c(nlon*nlat,niso))
reticula
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula[longitud, latitud]<- longitud*latitud
}
}
reticula<-array(data=NA,dim=c(nlon*nlat,niso))
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
array[longitud*latitud,iso]<- reticula[longitud*latitud,niso]
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<- reticula[longitud*latitud,niso]
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<- reticula[longitud*latitud,]
}
}
reticula<-array(data=NA,dim=c(nlon*nlat,niso))
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<- reticula[longitud*latitud,]
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula[longitud*latitud,niso]<- longitud*latitud
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula[longitud*latitud,iso]<- reticula[longitud*latitud,niso]
}
}
reticula<-array(data=NA,dim=c(nlon*nlat,niso))
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<- reticula[longitud*latitud,niso]
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula<-reticula[longitud*nlat,niso]
}
}
reticula<-array(data=NA,dim=c(nlon*nlat,niso))
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula[longitud,latitud,niso]<-reticula[longitud*latitud,niso]
}
}
for (longitud in prom_mensual) {
for(latitud in prom_mensual) {
reticula[longitud*latitud,niso]<-reticula[longitud*latitud,niso]
}
}
for (longitud in prom_mensual) {
reticula[longitud*latitud,niso]<-reticula[longitud*latitud,niso]
}
#lat y long de cada uno de los 4 niveles
dim(prom_mensual)
reticula<-array(data=NA,dim=c(nlon*nlat,niso))
latitud<-prom_mensual[1:14]
longitud<-prom_mensual[1:8]
ret[longitud,latitud]<-longitud*latitud
reticula[longitud,latitud]<-longitud*latitud
