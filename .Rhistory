#############################
x<-matrix(1:6,2,3) #Lo q pongo en la matriz, 2 filas, 3 columnas
x
x[,2]
x[1,1:2]
x[3,]
x[3] #Da error porque estaria pidiendo la 3 fila y no hay
ncol(x); nrow(x)
t(x)
cbind(1,x) #Pega una columna de unos con la matriz
cbind(1:3,1:6) #Recicla el primer elemento las veces q lo requiera
x
apply(x,1,sum) #Aplico a la matriz una función segun la función q yo quiera. Aplica a la matrix x por fila le suma 1
#############################
a=diag(3) #Matriz cuadrada (en este caso 3x3) con diagonal de 1
a
b=rnorm(9) #Forma de obtener 9 valores aleatorios de la dist normal con media 0 y desvio estandar 1. Me da vector de 9 elementos
b
dim(b)=c(3,3) #le cambio las dimensiones
b
require(abind) #Forma de instalar el paquete abind. Es como antes de pegar (cbinf y rbind)
abind(a,b,along=3)->c	#Pegar matriz a con la b. Y con along empiezo a jugar con dimensiones. A lo largo de 3 me genera tiempos, la matriz a es el primer tiempo y la b el segundo creo
c
abind(a,b,along=1)->d
d
abind(a,b,along=2)->e
e
x
apply(x,1,sum) #Aplico a la matriz una función segun la función q yo quiera. Aplica a la matrix x por fila le suma 1
length(x)
max(x); min(x) #Elementos maximos y minimos
max(dim(x)) #Maximo de las dimensiones. Aca da 3
c<-matrix(c(2,1,5,6,3,8,4,9,2,7,3,5),nrow=3,ncol=4)
c
c[order(c[,1]),] #Ordena por columnas, por default es creciente. Si la quiero decreciente uso el decreasing=T
#################################################
x
diag(x) #a pesar de no ser cuadrada me da la diagonal
l<-diag(5) #Matriz diagonal de 5x5
l
s=diag(10,3,4) #Matriz de 3 filas y 4 columnas con diagonal de 10
s
x=c(2,3,4,5)
x
y=diag(x,4,4) #Matriz de 4x4 con diagonal a x
y
#############################
x<-matrix(1:6,2,3) #Lo q pongo en la matriz, 2 filas, 3 columnas
x
mean(x)
sd(x)
solve(x)
det(x)
#######################################
rm(list=ls())
B=matrix(c(1,8,5,3,0,2,3,6,1), ncol=3,byrow=TRUE)
B
L=B #Para no sobreescribir
L[lower.tri(B)]=0 #Coloca 0 en el triangulo inf, sin la diagonal Triang inf es
#de la diagonal para abajo. A la matriz L [elementos de la matriz B] le ponga 0``
L
#seteo mi  directorio de trabajo y limpio el environment
rm(list=ls())
setwd("/Users/cande/Desktop/Labo/Practica_3/")
#Cargo mis datos
datos_azul<-read.table("AZUL.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_catamarca<-read.table("CATAMARCA.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_aeroparque<-read.table("AEROPARQUE.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_chilecito<-read.table("CHILECITO.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_iguazu<-read.table("IGUAZU.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_mendoza<-read.table("MENDOZA.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
#Defino el dato faltante para despues convertirlo a NA para y no interfiera en
#las cuentas
dato_faltante<- -999.9
datos_azul[which(datos_azul== dato_faltante)] <- NA
datos_catamarca[which(datos_catamarca== dato_faltante)] <- NA
datos_aeroparque[which(datos_aeroparque== dato_faltante)] <- NA
datos_chilecito[which(datos_chilecito== dato_faltante)] <- NA
datos_iguazu[which(datos_iguazu== dato_faltante)] <- NA
datos_mendoza[which(datos_mendoza== dato_faltante)] <- NA
temp_faren_a_cent <- function (Temperatura) {
t <- (Temperatura - 32) * 5/9
return(t)
}
datos_azul$Temperatura<- temp_faren_a_cent(datos_azul$Temperatura)
datos_azul$Temperatura.de.Rocio <- temp_faren_a_cent(datos_azul$Temperatura.de.Rocio)
datos_catamarca$Temperatura<- temp_faren_a_cent(datos_catamarca$Temperatura)
datos_catamarca$Temperatura.de.Rocio <- temp_faren_a_cent(datos_catamarca$Temperatura.de.Rocio)
datos_aeroparque$Temperatura<- temp_faren_a_cent(datos_aeroparque$Temperatura)
datos_aeroparque$Temperatura.de.Rocio <- temp_faren_a_cent(datos_aeroparque$Temperatura.de.Rocio)
datos_chilecito$Temperatura<- temp_faren_a_cent(datos_chilecito$Temperatura)
datos_chilecito$Temperatura.de.Rocio <- temp_faren_a_cent(datos_chilecito$Temperatura.de.Rocio)
datos_iguazu$Temperatura<- temp_faren_a_cent(datos_iguazu$Temperatura)
datos_iguazu$Temperatura.de.Rocio <- temp_faren_a_cent(datos_iguazu$Temperatura.de.Rocio)
datos_mendoza$Temperatura<- temp_faren_a_cent(datos_mendoza$Temperatura)
datos_mendoza$Temperatura.de.Rocio <- temp_faren_a_cent(datos_mendoza$Temperatura.de.Rocio)
#Datos generales de cada estacion
datos_estaciones<-read.table("estaciones.txt")
colnames(datos_estaciones)<-c("Estacion","Latitud","Longitud","Altura")
#Agrego los datos de Mendoza
generales_mendoza<-data.frame("MENDOZA",-32.9,-68.8,746)
colnames(generales_mendoza)<-c("Estacion","Latitud","Longitud","Altura")
datos_estaciones<-rbind(datos_estaciones,generales_mendoza)
estaciones <-list()
for (e in 1:nrow(datos_estaciones)){
estacion <- list("Estacion"=datos_estaciones[[e,1]],"Latitud"=datos_estaciones[[e,2]],
"Longitud"=datos_estaciones[[e,3]], "Altura"=datos_estaciones[[e,4]]
)
datos_por_estacion <- list(estacion )
estaciones<-c(estaciones, datos_por_estacion)
}
names(estaciones)<-c("Generales Azul","Generales Aeroparque","Generales Catamarca","Generales Chilecito","Generales Iguazu", "Generales Mendoza")
estaciones<-list("Azul"=c(estaciones[[1]],datos_azul),"Aeroparque"=c(estaciones[[2]],datos_aeroparque),"Catamarca"=c(estaciones[[3]],datos_catamarca),"Chilecito"=c(estaciones[[4]],datos_chilecito),"Iguazu"=c(estaciones[[5]],datos_iguazu),"Mendoza"=c(estaciones[[6]],datos_mendoza))
View(estaciones)
#seteo mi  directorio de trabajo y limpio el environment
rm(list=ls())
setwd("/Users/cande/Desktop/Labo/Practica_3/")
#Cargo mis datos
datos_azul<-read.table("AZUL.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_catamarca<-read.table("CATAMARCA.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_aeroparque<-read.table("AEROPARQUE.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_chilecito<-read.table("CHILECITO.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_iguazu<-read.table("IGUAZU.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
datos_mendoza<-read.table("MENDOZA.txt",col.names=c("Codigo de identificación","Fecha","Temperatura","Temperatura de Rocio","Presión"))
#Defino el dato faltante para despues convertirlo a NA para y no interfiera en
#las cuentas
dato_faltante<- -999.9
datos_azul[which(datos_azul== dato_faltante)] <- NA
datos_catamarca[which(datos_catamarca== dato_faltante)] <- NA
datos_aeroparque[which(datos_aeroparque== dato_faltante)] <- NA
datos_chilecito[which(datos_chilecito== dato_faltante)] <- NA
datos_iguazu[which(datos_iguazu== dato_faltante)] <- NA
datos_mendoza[which(datos_mendoza== dato_faltante)] <- NA
temp_faren_a_cent <- function (Temperatura) {
t <- (Temperatura - 32) * 5/9
return(t)
}
datos_azul$Temperatura<- temp_faren_a_cent(datos_azul$Temperatura)
datos_azul$Temperatura.de.Rocio <- temp_faren_a_cent(datos_azul$Temperatura.de.Rocio)
datos_catamarca$Temperatura<- temp_faren_a_cent(datos_catamarca$Temperatura)
datos_catamarca$Temperatura.de.Rocio <- temp_faren_a_cent(datos_catamarca$Temperatura.de.Rocio)
datos_aeroparque$Temperatura<- temp_faren_a_cent(datos_aeroparque$Temperatura)
datos_aeroparque$Temperatura.de.Rocio <- temp_faren_a_cent(datos_aeroparque$Temperatura.de.Rocio)
datos_chilecito$Temperatura<- temp_faren_a_cent(datos_chilecito$Temperatura)
datos_chilecito$Temperatura.de.Rocio <- temp_faren_a_cent(datos_chilecito$Temperatura.de.Rocio)
datos_iguazu$Temperatura<- temp_faren_a_cent(datos_iguazu$Temperatura)
datos_iguazu$Temperatura.de.Rocio <- temp_faren_a_cent(datos_iguazu$Temperatura.de.Rocio)
datos_mendoza$Temperatura<- temp_faren_a_cent(datos_mendoza$Temperatura)
datos_mendoza$Temperatura.de.Rocio <- temp_faren_a_cent(datos_mendoza$Temperatura.de.Rocio)
#Datos generales de cada estacion
datos_estaciones<-read.table("estaciones.txt")
colnames(datos_estaciones)<-c("Estacion","Latitud","Longitud","Altura")
#Agrego los datos de Mendoza
generales_mendoza<-data.frame("MENDOZA",-32.9,-68.8,746)
colnames(generales_mendoza)<-c("Estacion","Latitud","Longitud","Altura")
datos_estaciones<-rbind(datos_estaciones,generales_mendoza)
estaciones <-list()
for (e in 1:nrow(datos_estaciones)){
estacion <- list("Estacion"=datos_estaciones[[e,1]],"Latitud"=datos_estaciones[[e,2]],
"Longitud"=datos_estaciones[[e,3]], "Altura"=datos_estaciones[[e,4]]
)
datos_por_estacion <- list(estacion )
estaciones<-c(estaciones, datos_por_estacion)
}
names(estaciones)<-c("Generales Azul","Generales Aeroparque","Generales Catamarca","Generales Chilecito","Generales Iguazu", "Generales Mendoza")
estaciones<-list("Azul"=c(estaciones[[1]],datos_azul),"Aeroparque"=c(estaciones[[2]],datos_aeroparque),"Catamarca"=c(estaciones[[3]],datos_catamarca),"Chilecito"=c(estaciones[[4]],datos_chilecito),"Iguazu"=c(estaciones[[5]],datos_iguazu),"Mendoza"=c(estaciones[[6]],datos_mendoza))
#Ordeno mi environment
rm(list="datos_aeroparque","datos_azul","datos_catamarca","datos_chilecito","datos_iguazu","datos_mendoza")
rm(list="datos_estaciones","datos_por_estacion","estacion","generales_mendoza")
#---------------------------------  Punto 2 ---------------------------------
#---------------------------------  Inciso i ---------------------------------
resumen<-function(lista){
nombres <- c()
fecha_inicial <- c()
fecha_final <- c()
mean_T <- c()
mean_Tr <- c()
desv_est_T <- c()
desv_est_Tr <- c()
max_T <- c()
min_T <- c()
max_Tr <- c()
min_Tr <- c()
#i es estacion
#j puede ser Datos o Ubicacion
#k puede ser cualquier elemento dentro de Datos o Ubicacion
for (estacion in 1:length(lista)){
for (elemento in names(lista [[estacion]] )) {
if (elemento == "Fecha"){
fecha_inicial[estacion] <- lista[[estacion]][[elemento]][1]
fecha_final[estacion]<- lista[[estacion]] [[elemento]][length(lista [[estacion]] [[elemento]])]
}
else if (elemento == "Temperatura"){
mean_T [estacion]<- mean(lista[[estacion]][[elemento]],na.rm=T)
desv_est_T [estacion] <- sd(lista[[estacion]][[elemento]],na.rm=T)
max_T [estacion]  <- max(lista[[estacion]][[elemento]],na.rm=T)
min_T [estacion] <- min(lista[[estacion]][[elemento]],na.rm=T)
}
else if (elemento == "Temperatura.de.Rocio"){
mean_Tr [estacion] <- mean(lista[[estacion]][[elemento]],na.rm=T)
desv_est_Tr [estacion] <- sd(lista[[estacion]][[elemento]],na.rm=T)
max_Tr [estacion]  <- max(lista[[estacion]][[elemento]],na.rm=T)
min_Tr [estacion] <- min(lista[[estacion]][[elemento]],na.rm=T)
}
}
}
resumen_estadistica <- data.frame("Fecha inicial"= fecha_inicial,
"Fecha final"= fecha_final,"Media de temperatura"= mean_T,
"Desvio estandar de temperatura"= desv_est_T,
"Máximo de temperatura"= max_T,"Minimo de temperatura"= min_T,
"Media de temperatura de rocio"= mean_Tr,
"Desvio estandar de temperatura de rocio"= desv_est_Tr,
"Máximo de temperatura de rocio"= max_Tr,
"Minimo de temperatura de rocio"= min_Tr,
row.names=c("Azul","Catamarca","Aeroparque","Chilecito",
"Iguazu","Mendoza"))
return(resumen_estadistica)
}
resumen(estaciones)
#---------------------------------  Inciso ii ---------------------------------
cercania <- function(estacion,lat_min,lat_max,long_min,long_max) {
if(estacion=="Azul"){
if (lista[["Azul"]][["Latitud"]][]>=lat_min & lista[["Azul"]][["Latitud"]][]<=lat_max & lista[["Azul"]][["Longitud"]][]>=long_min & lista[["Azul"]][["Longitud"]][]<=long_max){
print("La estación Azul no tiene estaciones cercanas")
} else {
print("la estacion Azul no tiene estaciones cercanas")
}
} else if (estacion=="Aeroparque"){
if (lista[["Aeroparque"]][["Latitud"]][]>=lat_min & lista[["Aeroparque"]][["Latitud"]][]<=lat_max & lista[["Aeroparque"]][["Longitud"]][]>=long_min & lista[["Aeroparque"]][["Longitud"]][]<=long_max){
print("La estación Aeroparque no tiene estaciones cercanas")
} else {
print("la estacion Aeroparque no tiene estaciones cercanas")
}
} else if (estacion=="Catamarca"){
if (lista[["Catamarca"]][["Latitud"]][]>=lat_min & lista[["Catamarca"]][["Latitud"]][]<=lat_max & lista[["Catamarca"]][["Longitud"]][]>=long_min & lista[["Catamarca"]][["Longitud"]][]<=long_max){
print("La estación Catamarca no tiene estaciones cercanas")
} else {
print("la estacion Catamarca no tiene estaciones cercanas")
}
}  else if (estacion=="Chilecito"){
if (lista[["Chilecito"]][["Latitud"]][]>=lat_min & lista[["Chilecito"]][["Latitud"]][]<=lat_max & lista[["Chilecito"]][["Longitud"]][]>=long_min & lista[["Chilecito"]][["Longitud"]][]<=long_max){
print("La estación Chilecito no tiene estaciones cercanas")
} else {
print("la estacion Chilecito no tiene estaciones cercanas")
}
} else if (estacion=="Iguazu"){
if (lista[["Iguazu"]][["Latitud"]][]>=lat_min & lista[["Iguazu"]][["Latitud"]][]<=lat_max & lista[["Iguazu"]][["Longitud"]][]>=long_min & lista[["Iguazu"]][["Longitud"]][]<=long_max){
print("La estación Iguazu no tiene estaciones cercanas")
} else {
print("la estacion Iguazu no tiene estaciones cercanas")
}
} else if (estacion=="Mendoza"){
if (lista[["Mendoza"]][["Latitud"]][]>=lat_min & lista[["Mendoza"]][["Latitud"]][]<=lat_max & lista[["Mendoza"]][["Longitud"]][]>=long_min & lista[["Mendoza"]][["Longitud"]][]<=long_max){
print("La estación Mendoza no tiene estaciones cercanas")
} else {
print("la estacion Mendoza no tiene estaciones cercanas")
}
}
}
cercania(estaciones,-36.8,-36.8,-59.9,-59.9)
cercania(Azul,-36.8,-36.8,-59.9,-59.9)
cercania("Azul",-36.8,-36.8,-59.9,-59.9)
#---------------------------------  Inciso ii ---------------------------------
cercania <- function(estacion,lat_min,lat_max,long_min,long_max) {
if(estacion=="Azul"){
if (estaciones[["Azul"]][["Latitud"]][]>=lat_min & estaciones[["Azul"]][["Latitud"]][]<=lat_max & estaciones[["Azul"]][["Longitud"]][]>=long_min & estaciones[["Azul"]][["Longitud"]][]<=long_max){
print("La estación Azul no tiene estaciones cercanas")
} else {
print("la estacion Azul no tiene estaciones cercanas")
}
} else if (estacion=="Aeroparque"){
if (estaciones[["Aeroparque"]][["Latitud"]][]>=lat_min & estaciones[["Aeroparque"]][["Latitud"]][]<=lat_max & estaciones[["Aeroparque"]][["Longitud"]][]>=long_min & estaciones[["Aeroparque"]][["Longitud"]][]<=long_max){
print("La estación Aeroparque no tiene estaciones cercanas")
} else {
print("la estacion Aeroparque no tiene estaciones cercanas")
}
} else if (estacion=="Catamarca"){
if (estaciones[["Catamarca"]][["Latitud"]][]>=lat_min & estaciones[["Catamarca"]][["Latitud"]][]<=lat_max & estaciones[["Catamarca"]][["Longitud"]][]>=long_min & estaciones[["Catamarca"]][["Longitud"]][]<=long_max){
print("La estación Catamarca no tiene estaciones cercanas")
} else {
print("la estacion Catamarca no tiene estaciones cercanas")
}
}  else if (estacion=="Chilecito"){
if (estaciones[["Chilecito"]][["Latitud"]][]>=lat_min & estaciones[["Chilecito"]][["Latitud"]][]<=lat_max & estaciones[["Chilecito"]][["Longitud"]][]>=long_min & estaciones[["Chilecito"]][["Longitud"]][]<=long_max){
print("La estación Chilecito no tiene estaciones cercanas")
} else {
print("la estacion Chilecito no tiene estaciones cercanas")
}
} else if (estacion=="Iguazu"){
if (estaciones[["Iguazu"]][["Latitud"]][]>=lat_min & estaciones[["Iguazu"]][["Latitud"]][]<=lat_max & estaciones[["Iguazu"]][["Longitud"]][]>=long_min & estaciones[["Iguazu"]][["Longitud"]][]<=long_max){
print("La estación Iguazu no tiene estaciones cercanas")
} else {
print("la estacion Iguazu no tiene estaciones cercanas")
}
} else if (estacion=="Mendoza"){
if (estaciones[["Mendoza"]][["Latitud"]][]>=lat_min & estaciones[["Mendoza"]][["Latitud"]][]<=lat_max & estaciones[["Mendoza"]][["Longitud"]][]>=long_min & estaciones[["Mendoza"]][["Longitud"]][]<=long_max){
print("La estación Mendoza no tiene estaciones cercanas")
} else {
print("la estacion Mendoza no tiene estaciones cercanas")
}
}
}
cercania("Azul",-36.8,-36.8,-59.9,-59.9)
#---------------------------------  Inciso ii ---------------------------------
cercania <- function(estacion,lat_min,lat_max,long_min,long_max) {
if(estacion=="Azul"){
if (estaciones[["Azul"]][["Latitud"]][]>=lat_min & estaciones[["Azul"]][["Latitud"]][]<=lat_max & estaciones[["Azul"]][["Longitud"]][]>=long_min & estaciones[["Azul"]][["Longitud"]][]<=long_max){
print("La estación Azul tiene estaciones cercanas")
} else {
print("la estacion Azul no tiene estaciones cercanas")
}
} else if (estacion=="Aeroparque"){
if (estaciones[["Aeroparque"]][["Latitud"]][]>=lat_min & estaciones[["Aeroparque"]][["Latitud"]][]<=lat_max & estaciones[["Aeroparque"]][["Longitud"]][]>=long_min & estaciones[["Aeroparque"]][["Longitud"]][]<=long_max){
print("La estación Aeroparque tiene estaciones cercanas")
} else {
print("la estacion Aeroparque no tiene estaciones cercanas")
}
} else if (estacion=="Catamarca"){
if (estaciones[["Catamarca"]][["Latitud"]][]>=lat_min & estaciones[["Catamarca"]][["Latitud"]][]<=lat_max & estaciones[["Catamarca"]][["Longitud"]][]>=long_min & estaciones[["Catamarca"]][["Longitud"]][]<=long_max){
print("La estación Catamarca tiene estaciones cercanas")
} else {
print("la estacion Catamarca no tiene estaciones cercanas")
}
}  else if (estacion=="Chilecito"){
if (estaciones[["Chilecito"]][["Latitud"]][]>=lat_min & estaciones[["Chilecito"]][["Latitud"]][]<=lat_max & estaciones[["Chilecito"]][["Longitud"]][]>=long_min & estaciones[["Chilecito"]][["Longitud"]][]<=long_max){
print("La estación Chilecito tiene estaciones cercanas")
} else {
print("la estacion Chilecito no tiene estaciones cercanas")
}
} else if (estacion=="Iguazu"){
if (estaciones[["Iguazu"]][["Latitud"]][]>=lat_min & estaciones[["Iguazu"]][["Latitud"]][]<=lat_max & estaciones[["Iguazu"]][["Longitud"]][]>=long_min & estaciones[["Iguazu"]][["Longitud"]][]<=long_max){
print("La estación Iguazu tiene estaciones cercanas")
} else {
print("la estacion Iguazu no tiene estaciones cercanas")
}
} else if (estacion=="Mendoza"){
if (estaciones[["Mendoza"]][["Latitud"]][]>=lat_min & estaciones[["Mendoza"]][["Latitud"]][]<=lat_max & estaciones[["Mendoza"]][["Longitud"]][]>=long_min & estaciones[["Mendoza"]][["Longitud"]][]<=long_max){
print("La estación Mendoza tiene estaciones cercanas")
} else {
print("la estacion Mendoza no tiene estaciones cercanas")
}
}
}
cercania("Azul",-36.8,-36.8,-59.9,-59.9)
cercania(Azul,-36.8,-36.8,-59.9,-59.9)
cercania("Azul",-36.8,-36.8,-59.9,-59.9)
View(estaciones)
